#!/bin/bash
set -eu
[ $# -lt 1  ] && echo "Use $0 only as an interpreter" 1>&2 && exit $LINENO
[ ! -f "$1" ] && echo "File '$1' does not exist"      1>&2 && exit $LINENO

# Automatic cleanup of temporary files
cout=$(mktemp "${TMPDIR-/tmp}/c99sh.XXXXXX.c") # Mangled source
xout=$(mktemp "${TMPDIR-/tmp}/c99sh.XXXXXX.x") # Compiled binary
trap 'rm -f "$cout" "$xout"' EXIT

# Process a possibly non-existent rcfile given its filename
declare -a flags=(${CFLAGS-} "-I$(dirname "$1")")
declare -a sources=("$cout" ${LDFLAGS-})
process_rcfile() {
  [ ! -f "$1" ] && return 0
  while read -r line; do
    if   [ -z "$line" ]
    then :
    elif [[ $line =~ ^[[:space:]]*# ]]
    then echo "$line" >> "$cout" # TODO Implicate '#line NNN rcfile'
    elif [[ $line =~ ^[[:space:]]*-[lLR] ]]
    then sources+=("$line")
    elif [[ $line =~ ^[[:space:]]*pkg-config[[:space:]]+--libs ]]
    then sources+=($(eval "$line")) # FIXME Glaring security bug
    elif [[ $line =~ ^[[:space:]]*pkg-config[[:space:]]+--cflags ]]
    then flags+=($(eval "$line")) # FIXME Glaring security concern
    else flags+=($line)
    fi
  done < "$1"
}

# Process any relevant rcfiles
process_rcfile "$HOME/.c99shrc"
[ "$PWD" != "$HOME" ] && process_rcfile "$PWD/.c99shrc"

# Prepare source files for "interpretation" by the compiler.
# Possibly swap shebang on first line of each with a line pragma so
#   (a) the source can be compiled, and
#   (b) errors and warnings show usable line details
echo "#line 1 \"$1\""                 >> "$cout"
sed "1s|^#!.*\$|#line 2 \"$1\"|" "$1" >> "$cout"

# Compile and execute with any remaining command line arguments
c99 -o "$xout" "${flags[@]}" "${sources[@]}"
shift
# TODO Can exec be used and the cleanup trap still executed?
"$xout" "$@"
