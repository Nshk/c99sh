#!/bin/bash
# c99sh: A shebang-friendly script for "interpreting" single C99 files
# from https://github.com/rhysu/c99sh.  Subject to the Simplified BSD License.

set -eu
fatal() { status=$1; shift; printf "$@" 1>&2; echo 1>&2; exit $status; }
[ $# -lt 1  ] && fatal $LINENO "Use %s only as an interpreter" "$0"
[ ! -f "$1" ] && fatal $LINENO "File '%s' does not exist"      "$1"

d=$(dirname "$1")                         # Directory of input
c=$(mktemp "${TMPDIR-/tmp}/c99sh.XXXXXX") # Mangled source to be compiled
x=$(mktemp "${TMPDIR-/tmp}/c99sh.XXXXXX") # Compiled binary to be run
trap 'rm -f "$c" "$x"' EXIT               # Automatic cleanup on exit

# Logic for accumulating details from some named rcfile
declare -a flags=(${CFLAGS-} "-I$d")      # CPPFLAGS, CFLAGS
declare -a logic=("$c" ${LDFLAGS-})       # Sources, LDFLAGS, LIBS
process_rcfile() {
  local i=0
  while read -r o; do
    echo "#line $((i+=1)) \"$1\" // $o" >> "$c"  # Record line in munged source
    if   [  -z "$o"        ]                     # Skip empty lines
    then :
    elif [[ $o =~ ^#      ]]                     # C preprocessor directives
    then echo "$o" >> "$c"
    elif [[ $o =~ ^-[lLR] ]]                     # Linker flags
    then logic+=($o)
    elif [[ $o =~ ^-      ]]                     # Compiler flags
    then flags+=($o)
    elif [[ $o =~ ^pkg-config[[:space:]]+--cflags[-+/._[:space:][:alnum:]]+$ ]]
    then flags+=($($o 2>/dev/null)) \
         || fatal $LINENO "$1:$i error: pkg-config failed\n\t$o\n\t^"
    elif [[ $o =~ ^pkg-config[[:space:]]+--libs[-+/._[:space:][:alnum:]]+$   ]]
    then logic+=($($o 2>/dev/null)) \
         || fatal $LINENO "$1:$i error: pkg-config failed\n\t$o\n\t^"
    elif [ -f "$o" ]                             # Linker target
    then logic+=($o)
    else fatal $LINENO "$1:$i error: non-existent or unknown option\n\t$o\n\t^"
    fi
  done < <(sed -e 's/^[[:space:]]*//;s/[[:space:]]*$//' "$1")
}

# Process only the first rcfile found; permits directory-specific settings
if   [ -f "$d/c99shrc" ]
then process_rcfile "$d/c99shrc"
elif [ -f "$HOME/.c99shrc" ]
then process_rcfile "$HOME/.c99shrc"
fi

# Prepare source files for "interpretation" by the compiler.
# Possibly swap shebang on first line of each with a line pragma so
#   (a) the source can be compiled, and
#   (b) errors and warnings show usable line details
echo "#line 1 \"$1\""                 >> "$c"
sed "1s|^#!.*\$|#line 2 \"$1\"|" "$1" >> "$c"

# Compile and execute with any remaining command line arguments
"${CC-cc}" -std=gnu99 -o "$x" "${flags[@]}" -x c "${logic[@]}" 1>&2
shift
"$x" "$@"
