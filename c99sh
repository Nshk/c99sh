#!/bin/bash
set -eu
[ $# -lt 1  ] && echo "Use $0 only as an interpreter" 1>&2 && exit $LINENO
[ ! -f "$1" ] && echo "File '$1' does not exist"      1>&2 && exit $LINENO

# Automatic cleanup of temporary files
dirn=$(dirname "$1")
cout=$(mktemp "${TMPDIR-/tmp}/c99sh.XXXXXX.c") # Mangled source
xout=$(mktemp "${TMPDIR-/tmp}/c99sh.XXXXXX.x") # Compiled binary
trap 'rm -f "$cout" "$xout"' EXIT

# Process an rcfile given its filename
declare -a flags=(${CFLAGS-} "-I$dirn")
declare -a sources=("$cout" ${LDFLAGS-})
process_rcfile() {
  local i=0
  while read -r line; do
    echo "#line $((i+=1)) \"$1\" // $line" >> "$cout"
    if   [ -z "$line" ]
    then :
    elif [[ $line =~ ^[[:space:]]*# ]]
    then echo "$line" >> "$cout"
    elif [[ $line =~ ^[[:space:]]*-[lLR] ]]
    then sources+=("$line")
    elif [[ $line =~ ^[[:space:]]*pkg-config[[:space:]]+--libs ]]
    then sources+=($(eval "$line")) # FIXME Glaring security bug
    elif [[ $line =~ ^[[:space:]]*pkg-config[[:space:]]+--cflags ]]
    then flags+=($(eval "$line")) # FIXME Glaring security concern
    else flags+=($line)
    fi
  done < "$1"
}

# Incorporate the first rcfile found
if   [ -f "$dirn/c99shrc" ]
then process_rcfile "$dirn/c99shrc"
elif [ -f "$HOME/.c99shrc" ]
then process_rcfile "$HOME/.c99shrc"
fi

# Prepare source files for "interpretation" by the compiler.
# Possibly swap shebang on first line of each with a line pragma so
#   (a) the source can be compiled, and
#   (b) errors and warnings show usable line details
echo "#line 1 \"$1\""                 >> "$cout"
sed "1s|^#!.*\$|#line 2 \"$1\"|" "$1" >> "$cout"

# Compile and execute with any remaining command line arguments
c99 -o "$xout" "${flags[@]}" "${sources[@]}" 1>&2
shift
# TODO Can exec be used and the cleanup trap still executed?
"$xout" "$@"
